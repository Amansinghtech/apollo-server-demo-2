type User {
	name: String
	email: Email
	age: Int
	gender: Gender
	lastLogin: Timestamp
}

enum Gender {
	Male
	Female
	Others
}

type Query {
	getUser: User
}

type createUserRes {
	code: Int
	success: Boolean
	message: String
	payload: User
}

input UserInput {
	name: String!
	email: Email!
	age: Int
	gender: Gender
	password: String!
}

type loginUserRes {
	code: Int
	success: Boolean
	message: String
	payload: User
	accessToken: String
}

type UserExists {
	message: String!
	email: Email
}

union CreateUserResult = User | BadUserInput | UserExists | InternalServerError

type Mutation {
	createUser(form: UserInput!): CreateUserResult
	loginUser(email: Email!, password: String!): loginUserRes
}
